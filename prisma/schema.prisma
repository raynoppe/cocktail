datasource db {
    provider = "sqlite"
    url      = env("DATABASE_URL")
}

generator client {
    provider = "prisma-client-js"
}

model User {
    id            String          @id @default(cuid())
    name          String?
    email         String          @unique
    password      String
    emailVerified DateTime?
    image         String?
    user_type     String         @default("user")
    accounts      Account[]
    sessions      Session[]
    // Optional for WebAuthn support
    Authenticator Authenticator[]

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
    Page      Page[]
}

model Account {
    id                String  @id @default(cuid())
    userId            String
    type              String
    provider          String
    providerAccountId String
    refresh_token     String?
    access_token      String?
    expires_at        Int?
    token_type        String?
    scope             String?
    id_token          String?
    session_state     String?

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    user User @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@unique([provider, providerAccountId])
}

model Session {
    id           String   @id @default(cuid())
    sessionToken String   @unique
    userId       String
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
}

model VerificationToken {
    identifier String
    token      String
    expires    DateTime

    @@unique([identifier, token])
}

// Optional for WebAuthn support
model Authenticator {
    credentialID         String  @unique
    userId               String
    providerAccountId    String
    credentialPublicKey  String
    counter              Int
    credentialDeviceType String
    credentialBackedUp   Boolean
    transports           String?

    user User @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@id([userId, credentialID])
}

// pages
model Page {
    id          String    @id @default(cuid())
    title       String
    slug        String
    content     String
    folderId    String
    published   Boolean
    publishedAt DateTime?
    authorId    String
    author      User      @relation(fields: [authorId], references: [id])
    status      String    @default("draft")

    createdAt   DateTime      @default(now())
    updatedAt   DateTime      @updatedAt
    PageContent PageContent[]
}

model PageContent {
    id          String   @id @default(cuid())
    pageId      String
    parentId    String?
    content     String
    contentType String
    className   String
    style       String
    order       Int
    createdAt   DateTime @default(now())
    updatedAt   DateTime @updatedAt

    page Page @relation(fields: [pageId], references: [id])
}

model Folders {
    id        String   @id @default(cuid())
    name      String
    parentId  String?
    order     Int
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
}
